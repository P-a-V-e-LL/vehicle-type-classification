# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'add_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QCoreApplication
from PyQt5.QtWidgets import QFileDialog, QWidget, QMessageBox
from PyQt5.QtGui import QIcon, QPixmap, QIntValidator
from os.path import expanduser
from main_Window import *
import sqlite3
import numpy as np


class Ui_db_add_window(object):
    def __init__(self, classifier, sql_connection, cursor, image_path=None):
        self.classifier = classifier
        self.image_path = image_path
        self.sqlite_connection = sql_connection
        self.cursor = cursor

    def setupUi(self, db_add_window, window):
        db_add_window.setObjectName("db_add_window")
        db_add_window.resize(704, 421)
        db_add_window.setGeometry(QtCore.QRect(550, 350, 704, 421))
        self.window = db_add_window
        self.centralwidget = QtWidgets.QWidget(db_add_window)
        self.centralwidget.setObjectName("centralwidget")
        self.OnlyInt = QIntValidator(0, 100000)
        self.edit_parameters_label = QtWidgets.QLabel(self.centralwidget)
        self.edit_parameters_label.setGeometry(QtCore.QRect(20, 30, 161, 19))
        self.edit_parameters_label.setObjectName("edit_parameters_label")
        self.model_param_label = QtWidgets.QLabel(self.centralwidget)
        self.model_param_label.setGeometry(QtCore.QRect(20, 70, 71, 21))
        self.model_param_label.setObjectName("model_param_label")
        self.model_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.model_edit.setGeometry(QtCore.QRect(120, 70, 151, 27))
        self.model_edit.setObjectName("model_edit")
        self.length_param_label = QtWidgets.QLabel(self.centralwidget)
        self.length_param_label.setGeometry(QtCore.QRect(20, 120, 81, 21))
        self.length_param_label.setObjectName("length_param_label")
        self.length_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.length_edit.setGeometry(QtCore.QRect(120, 120, 151, 27))
        self.length_edit.setObjectName("length_edit")
        self.length_edit.setValidator(self.OnlyInt)

        self.width_param_label = QtWidgets.QLabel(self.centralwidget)
        self.width_param_label.setGeometry(QtCore.QRect(20, 170, 101, 21))
        self.width_param_label.setObjectName("width_param_label")
        self.width_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.width_edit.setGeometry(QtCore.QRect(120, 170, 151, 27))
        self.width_edit.setObjectName("width_edit")
        self.width_edit.setValidator(self.OnlyInt)

        self.height_param_label = QtWidgets.QLabel(self.centralwidget)
        self.height_param_label.setGeometry(QtCore.QRect(20, 220, 91, 21))
        self.height_param_label.setObjectName("height_param_label")
        self.height_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.height_edit.setGeometry(QtCore.QRect(120, 220, 151, 27))
        self.height_edit.setObjectName("height_edit")
        self.height_edit.setValidator(self.OnlyInt)

        self.image_label = QtWidgets.QLabel(self.centralwidget)
        self.image_label.setGeometry(QtCore.QRect(60, 260, 150, 150))
        self.image_label.setAutoFillBackground(False)
        self.image_label.setScaledContents(False)
        self.image_label.setObjectName("image_label")

        self.wheel_distance_param_label = QtWidgets.QLabel(self.centralwidget)
        self.wheel_distance_param_label.setGeometry(QtCore.QRect(300, 70, 161, 21))
        self.wheel_distance_param_label.setObjectName("wheel_distance_param_label")
        self.wheel_distance_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.wheel_distance_edit.setGeometry(QtCore.QRect(530, 70, 151, 27))
        self.wheel_distance_edit.setObjectName("wheel_distance_edit")
        self.wheel_distance_edit.setValidator(self.OnlyInt)

        self.clearance_param_label = QtWidgets.QLabel(self.centralwidget)
        self.clearance_param_label.setGeometry(QtCore.QRect(300, 120, 161, 21))
        self.clearance_param_label.setObjectName("clearance_param_label")
        self.clearance_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.clearance_edit.setGeometry(QtCore.QRect(530, 120, 151, 27))
        self.clearance_edit.setObjectName("clearance_edit")
        self.clearance_edit.setValidator(self.OnlyInt)

        self.front_track_width_param_label = QtWidgets.QLabel(self.centralwidget)
        self.front_track_width_param_label.setGeometry(QtCore.QRect(300, 170, 231, 21))
        self.front_track_width_param_label.setObjectName("front_track_width_param_label")
        self.front_track_width_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.front_track_width_edit.setGeometry(QtCore.QRect(530, 170, 151, 27))
        self.front_track_width_edit.setObjectName("front_track_width_edit")
        self.front_track_width_edit.setValidator(self.OnlyInt)

        self.back_track_width_param_label = QtWidgets.QLabel(self.centralwidget)
        self.back_track_width_param_label.setGeometry(QtCore.QRect(300, 220, 241, 21))
        self.back_track_width_param_label.setObjectName("back_track_width_param_label")

        self.back_track_width_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.back_track_width_edit.setGeometry(QtCore.QRect(530, 220, 151, 27))
        self.back_track_width_edit.setObjectName("back_track_width_edit")
        #self.OnlyInt = QIntValidator()
        self.back_track_width_edit.setValidator(self.OnlyInt)

        self.add_button = QtWidgets.QPushButton(self.centralwidget)
        self.add_button.setGeometry(QtCore.QRect(590, 320, 94, 31))
        self.add_button.setObjectName("add_button")
        self.add_button.clicked.connect(self.add_button_click)
        self.browse_button = QtWidgets.QPushButton(self.centralwidget)
        self.browse_button.setGeometry(QtCore.QRect(587, 270, 94, 31))
        self.browse_button.setObjectName("browse_button")
        self.browse_button.clicked.connect(self.browse_button_click)

        self.path_textedit = QtWidgets.QTextEdit(self.centralwidget)
        self.path_textedit.setGeometry(QtCore.QRect(310, 270, 261, 31))
        self.path_textedit.setObjectName("path_textedit")
        db_add_window.setCentralWidget(self.centralwidget)

        self.mainWindow = window

        self.retranslateUi(db_add_window)
        QtCore.QMetaObject.connectSlotsByName(db_add_window)
        #self.close()

    def retranslateUi(self, db_add_window):
        _translate = QtCore.QCoreApplication.translate
        db_add_window.setWindowTitle(_translate("db_add_window", "Добавление транспортного средства"))
        self.edit_parameters_label.setText(_translate("db_add_window", "Введите параметры"))
        self.model_param_label.setText(_translate("db_add_window", "Модель:"))
        self.length_param_label.setText(_translate("db_add_window", "Длина, мм:"))
        self.width_param_label.setText(_translate("db_add_window", "Ширина, мм:"))
        self.height_param_label.setText(_translate("db_add_window", "Высота, мм:"))
        self.wheel_distance_param_label.setText(_translate("db_add_window", "Колесная база, мм:"))
        self.clearance_param_label.setText(_translate("db_add_window", "Клиренс, мм:"))
        self.front_track_width_param_label.setText(_translate("db_add_window", "Ширина передней колеи, мм:"))
        self.back_track_width_param_label.setText(_translate("db_add_window", "Ширина задней колеи, мм:"))
        self.add_button.setText(_translate("db_add_window", "Добавить"))
        self.browse_button.setText(_translate("db_add_window", "Загрузить"))

    def browse_button_click(self):
        '''Нажатие на кнопку загрузки изображения, выводит и передает путь до изображения.'''
        home = expanduser("~")
        fname, _ = QFileDialog.getOpenFileName(None, 'Open file', home, "Image (*.png *.jpg *jpeg)")
        self.path_textedit.setPlainText(fname)
        pixmap = QPixmap(fname)
        pixmap_resized = pixmap.scaled(150, 150, QtCore.Qt.KeepAspectRatio)
        self.image_label.setPixmap(pixmap_resized)
        #self.path_edit.setAlignment(Qt.AlignBottom)
        self.image_path = fname

    def closeEvent(self, event):
        close = QMessageBox.question(self,
                                     "QUIT",
                                     "Sure?",
                                      QMessageBox.Yes | QMessageBox.No)
        if close == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()

    def add_button_click(self):
        if not self.image_path:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("Загрузите изображение.")
            msgBox.setWindowTitle("ОШИБКА!")
            msgBox.setStandardButtons(QMessageBox.Ok)
            #msgBox.buttonClicked.connect(msgButtonClick)

            returnValue = msgBox.exec()
            if returnValue == QMessageBox.Ok:
                print('OK clicked')
            return
        btwt = int(self.back_track_width_edit.text()) if self.back_track_width_edit.text() != '' else "NULL"
        ftwt = int(self.front_track_width_edit.text()) if self.front_track_width_edit.text() != '' else "NULL"
        clr = int(self.clearance_edit.text()) if self.clearance_edit.text() != '' else "NULL"
        mdl = self.model_edit.text()
        w = int(self.width_edit.text()) if self.width_edit.text() != '' else "NULL"
        l = int(self.length_edit.text()) if self.length_edit.text() != '' else "NULL"
        h = int(self.height_edit.text()) if self.height_edit.text() != '' else "NULL"
        wd = int(self.wheel_distance_edit.text()) if self.wheel_distance_edit.text() != '' else "NULL"
        emb = self.classifier.get_embedding_vector(self.image_path)
        self.add_array = [mdl, l, w, h, wd, clr, ftwt, btwt, emb]
        self.add_array[-1] = np.array2string(self.add_array[-1])
        #print(type(self.add_array))
        #emb = np.array2string(embedding)
        sql = '''INSERT INTO "main"."vehicle"("model","vehicle_length","vehicle_width",
        "vehicle_height","wheel_distance","clearance","front_track_width","back_track_width","embedding")
        VALUES ("{0}",{1},{2},{3},{4},{5},{6},{7},"{8}")'''.format(self.add_array[0], self.add_array[1], self.add_array[2], self.add_array[3], self.add_array[4], self.add_array[5], self.add_array[6], self.add_array[7], self.add_array[8])
        print(sql)
        self.cursor.execute(sql)
        self.sqlite_connection.commit()
        self.window.close()
