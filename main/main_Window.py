# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QButtonGroup, QHeaderView, QWidget, QMessageBox
from PyQt5.QtGui import QIcon, QPixmap
from os.path import expanduser
from PyQt5.QtCore import Qt
import sqlite3
import numpy as np
from config_actions import *
from add_window import Ui_db_add_window
from search_window import Ui_search_window


class Ui_MainWindow(object):
    def __init__(self):
        self.image_path = None
        self.db = config_read()
        self.sqlite_connection = None
        self.cursor = None
        #self.add_array = None

    def load_db(self, db):
        '''Заружает БД и обработчик запросов..'''
        try:
            if not os.path.exists(db):
                # сюда обработку загрузки если нет существующей?
                print("База данных не обнаружена. Требуется ручная загрузка.")
                db = self.load_new_db()
                #return
            self.sqlite_connection = sqlite3.connect(db)
            self.cursor = self.sqlite_connection.cursor()
            print("База данных создана и успешно подключена к SQLite")
            sqlite_select_query = "select sqlite_version();"
            self.cursor.execute(sqlite_select_query)
            record = self.cursor.fetchall()
            print("Версия базы данных SQLite: ", record)
            #cursor.close()
            self.statusbar_text("Загружена база данных: " + db)
        except sqlite3.Error as error:
            print("Ошибка при подключении к sqlite", error)

    def close_db_connection(self):
        '''Закрытие соединения с БД.'''
        if self.cursor:
            self.cursor.close()
            self.sqlite_connection.close()
            print("Соединение с SQLite закрыто")
        return 0

    def load_new_db(self, message='БД не найдена, требуется загрузка новой...'):
        home = expanduser("~")
        fname, _ = QFileDialog.getOpenFileName(None, message, home, "DB (*.db)")
        config_write(fname)
        print("Загружена новыя база данных: ", fname)
        return fname

    def setupUi(self, MainWindow):
        self.main_window = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setGeometry(QtCore.QRect(500, 300, 800, 600))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.results_table = QtWidgets.QTableWidget(self.centralwidget)
        self.results_table.setGeometry(QtCore.QRect(20, 30, 341, 521))
        self.results_table.setObjectName("results_table")
        self.results_table.setColumnCount(2)
        self.results_table.setRowCount(8)
        self.results_table.setWordWrap(True)

        #rowPosition = self.results_table.rowCount()
        #self.results_table.insertRow(rowPosition)
        #self.results_table.setItem(0 , 0, QtWidgets.QTableWidgetItem("Параметр"))
        #self.results_table.setItem(0 , 1, QtWidgets.QTableWidgetItem("Значение"))
        row_labels = ["Параметр", "Значение"]
        self.results_table.setHorizontalHeaderLabels(row_labels)
        self.results_table.verticalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.results_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        #self.results_table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        self.results_table.horizontalHeader().setMinimumSectionSize(0)

        self.browse_button = QtWidgets.QPushButton(self.centralwidget)
        self.browse_button.setGeometry(QtCore.QRect(660, 70, 111, 41))
        self.browse_button.setObjectName("browse_button")
        self.browse_button.clicked.connect(self.browse_button_click) # обработка нажатия
        self.path_edit = QtWidgets.QTextEdit(self.centralwidget)
        self.path_edit.setGeometry(QtCore.QRect(390, 70, 251, 41))
        self.path_edit.setReadOnly(True)
        self.path_edit.setObjectName("path_edit")
        self.recognize_button = QtWidgets.QPushButton(self.centralwidget)
        self.recognize_button.setGeometry(QtCore.QRect(660, 500, 111, 41))
        self.recognize_button.setObjectName("recognize_button")
        self.recognize_button.clicked.connect(self.recognize_button_click) #recognize_button_click)
        self.path_label = QtWidgets.QLabel(self.centralwidget)
        self.path_label.setGeometry(QtCore.QRect(390, 40, 341, 20))
        self.path_label.setAutoFillBackground(False)
        self.path_label.setScaledContents(False)
        self.path_label.setObjectName("path_label")

        self.image_label = QtWidgets.QLabel(self.centralwidget)
        self.image_label.setGeometry(QtCore.QRect(390, 365, 231, 231))
        self.image_label.setAutoFillBackground(False)
        self.image_label.setScaledContents(False)
        self.image_label.setObjectName("image_label")

        self.parameters_label = QtWidgets.QLabel(self.centralwidget)
        self.parameters_label.setGeometry(QtCore.QRect(390, 150, 181, 19))
        self.parameters_label.setObjectName("parameters_label")

        self.group1 = QButtonGroup()
        self.model_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        self.model_radiobutton.setGeometry(QtCore.QRect(390, 200, 151, 31))
        self.model_radiobutton.setObjectName("model_radiobutton")
        self.group1.addButton(self.model_radiobutton)

        self.group2 = QButtonGroup()
        self.height_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        self.height_radiobutton.setGeometry(QtCore.QRect(390, 240, 151, 31))
        self.height_radiobutton.setObjectName("height_radiobutton")
        self.group2.addButton(self.height_radiobutton)

        self.group3 = QButtonGroup()
        self.length_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        self.length_radiobutton.setGeometry(QtCore.QRect(390, 280, 151, 31))
        self.length_radiobutton.setObjectName("length_radiobutton")
        self.group3.addButton(self.length_radiobutton)

        self.group4 = QButtonGroup()
        self.width_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        self.width_radiobutton.setGeometry(QtCore.QRect(390, 320, 151, 31))
        self.width_radiobutton.setObjectName("width_radiobutton")
        self.group4.addButton(self.width_radiobutton)

        self.group5 = QButtonGroup()
        self.wheel_distance_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        self.wheel_distance_radiobutton.setGeometry(QtCore.QRect(540, 200, 151, 31))
        self.wheel_distance_radiobutton.setObjectName("wheel_distance_radiobutton")
        self.group5.addButton(self.wheel_distance_radiobutton)

        self.group6 = QButtonGroup()
        self.clearance_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        self.clearance_radiobutton.setGeometry(QtCore.QRect(540, 240, 151, 31))
        self.clearance_radiobutton.setObjectName("clearance_radiobutton")
        self.group6.addButton(self.clearance_radiobutton)

        self.group7 = QButtonGroup()
        self.front_track_width_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        self.front_track_width_radiobutton.setGeometry(QtCore.QRect(540, 280, 221, 31))
        self.front_track_width_radiobutton.setObjectName("front_track_width_radiobutton")
        self.group7.addButton(self.front_track_width_radiobutton)

        self.group8 = QButtonGroup()
        self.back_track_width_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        self.back_track_width_radiobutton.setGeometry(QtCore.QRect(540, 320, 211, 31))
        self.back_track_width_radiobutton.setObjectName("back_track_width_radiobutton")
        self.group8.addButton(self.back_track_width_radiobutton)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 24))
        self.menubar.setObjectName("menubar")
        # ПОДМЕНЮ для пререхода на другие окна.
        self.databaseMenu = self.menubar.addMenu('&База данных')

        add_databaseMenu = QtWidgets.QAction('&Добавить', self.centralwidget)
        add_databaseMenu.triggered.connect(self.db_add_vehicle)
        self.databaseMenu.addAction(add_databaseMenu)

        add_databaseMenu = QtWidgets.QAction('&Изменить', self.centralwidget)
        add_databaseMenu.triggered.connect(self.db_search_vehicle)
        self.databaseMenu.addAction(add_databaseMenu)

        load_databaseMenu = QtWidgets.QAction('&Загрузить БД...', self.centralwidget)
        load_databaseMenu.triggered.connect(self.menu_load_db)
        self.databaseMenu.addAction(load_databaseMenu)

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.load_db(self.db)
        self.load_tflite()

    def load_tflite(self):
        '''Загружает tflite модель нейронной сети.'''
        from vtc.classifier import Classifier
        self.classifier = Classifier("./vtc/model_exp2.tflite", 3.4)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Расопзнавание транспортного средства"))
        self.browse_button.setText(_translate("MainWindow", "Загрузить"))
        self.recognize_button.setText(_translate("MainWindow", "Пуск"))
        self.path_label.setText(_translate("MainWindow", "Выберите изображение для распознавания"))
        self.parameters_label.setText(_translate("MainWindow", "Выберите параметры"))
        self.model_radiobutton.setText(_translate("MainWindow", "Модель"))
        self.height_radiobutton.setText(_translate("MainWindow", "Высота"))
        self.length_radiobutton.setText(_translate("MainWindow", "Длина"))
        self.width_radiobutton.setText(_translate("MainWindow", "Ширина"))
        self.wheel_distance_radiobutton.setText(_translate("MainWindow", "Колесная база"))
        self.clearance_radiobutton.setText(_translate("MainWindow", "Клиренс"))
        self.front_track_width_radiobutton.setText(_translate("MainWindow", "Ширина передней колеи"))
        self.back_track_width_radiobutton.setText(_translate("MainWindow", "Ширина задней колеи"))

    def statusbar_text(self, text):
        '''Выводит сообшение в statusbar.'''
        self.statusbar.showMessage(text)

    def set_table(self, model, height, length, width, wheel_distance, clearance, ftw, btw):
        '''Выводит значения в таблицу.'''
        i = 0
        #self.results_table.setItem(1 , 0, QtWidgets.QTableWidgetItem("Параметр"))
        #self.results_table.setItem(1 , 1, QtWidgets.QTableWidgetItem("Значение"))
        if self.model_radiobutton.isChecked():
            self.results_table.setItem(i , 0, QtWidgets.QTableWidgetItem("Модель"))
            self.results_table.setItem(i , 1, QtWidgets.QTableWidgetItem(model))
            i += 1
        if self.height_radiobutton.isChecked():
            self.results_table.setItem(i , 0, QtWidgets.QTableWidgetItem("Высота, мм"))
            self.results_table.setItem(i , 1, QtWidgets.QTableWidgetItem(str(height)))
            i += 1
        if self.length_radiobutton.isChecked():
            self.results_table.setItem(i , 0, QtWidgets.QTableWidgetItem("Длина, мм"))
            self.results_table.setItem(i , 1, QtWidgets.QTableWidgetItem(str(length)))
            i += 1
        if self.width_radiobutton.isChecked():
            self.results_table.setItem(i , 0, QtWidgets.QTableWidgetItem("Ширина, мм"))
            self.results_table.setItem(i , 1, QtWidgets.QTableWidgetItem(str(width)))
            i += 1
        if self.wheel_distance_radiobutton.isChecked():
            self.results_table.setItem(i , 0, QtWidgets.QTableWidgetItem("Колесная база, мм"))
            self.results_table.setItem(i , 1, QtWidgets.QTableWidgetItem(str(wheel_distance)))
            i += 1
        if self.clearance_radiobutton.isChecked():
            self.results_table.setItem(i , 0, QtWidgets.QTableWidgetItem("Клиренс, мм"))
            self.results_table.setItem(i , 1, QtWidgets.QTableWidgetItem(str(clearance)))
            i += 1
        if self.front_track_width_radiobutton.isChecked():
            self.results_table.setItem(i , 0, QtWidgets.QTableWidgetItem("Ширина передней колеи, мм"))
            self.results_table.setItem(i , 1, QtWidgets.QTableWidgetItem(str(ftw)))
            i += 1
        if self.back_track_width_radiobutton.isChecked():
            self.results_table.setItem(i , 0, QtWidgets.QTableWidgetItem("Ширина задней колеи, мм"))
            self.results_table.setItem(i , 1, QtWidgets.QTableWidgetItem(str(btw)))
            i += 1

    def browse_button_click(self):
        '''Нажатие на кнопку загрузки изображения, выводит и передает путь до изображения.'''
        home = expanduser("~")
        fname, _ = QFileDialog.getOpenFileName(None, 'Open file', home, "Image (*.png *.jpg *jpeg)")
        self.path_edit.setPlainText(fname)
        pixmap = QPixmap(fname)
        pixmap_resized = pixmap.scaled(231, 231, QtCore.Qt.KeepAspectRatio)
        self.image_label.setPixmap(pixmap_resized)
        #self.path_edit.setAlignment(Qt.AlignBottom)
        self.image_path = fname

    def prep(self, l):
        for i in range(len(l)):
            if (l[i] == '') or (l[i] == '[[') or (l[i] == ']]'):
                l[i] = ''
                continue
            if '[[' in l[i]:
                l[i] = l[i][2:]
            if ']]' in l[i]:
                l[i] = l[i][:-2]
        #l = l[1:]
        #l[-1] = l[-1][:-2]
        for num in l:
            if num == '':
                l.remove(num)
        #if l[-1] == '':
        #    l = l[:-1]
        for num in l:
            num = float(num)
        l = np.asarray(l).astype(np.float32)
        return l

    def recognize_button_click(self):
        '''Нажате на кнопку распознавания изображения, проводит распонавание изображения и выводит его результаты в таблицу'''
        if not self.image_path:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("Загрузите изображение.")
            msgBox.setWindowTitle("ОШИБКА!")
            msgBox.setStandardButtons(QMessageBox.Ok)
            returnValue = msgBox.exec()
            if returnValue == QMessageBox.Ok:
                print('OK clicked')
                return
            return
        embedding = self.classifier.get_embedding_vector(self.image_path)
        sql = '''SELECT model, embedding FROM main.vehicle'''
        self.cursor.execute(sql)
        rows = self.cursor.fetchall()
        min = 3.4 # 100
        vehicle_class = None
        for row in rows:
            #print(self.prep(row[1].split()), embedding[0])
            new_distance = self.classifier.get_distance(self.prep(row[1].split()), embedding) # 0
            if new_distance < min:
                min = new_distance
                vehicle_class = row[0]
        print(vehicle_class) # предсказанный класс
        if vehicle_class != None:
            sql_get_info = '''SELECT * FROM main.vehicle WHERE model = "{0}"'''.format(vehicle_class)
            self.cursor.execute(sql_get_info)
            info = self.cursor.fetchall()
            print(info[0])
            self.set_table(info[0][1], info[0][2], info[0][3], info[0][4], info[0][5], info[0][6], info[0][7], info[0][8])
        else:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("Данный автомобиль не найден.")
            msgBox.setWindowTitle("Предупреждение!")
            msgBox.setStandardButtons(QMessageBox.Ok)
            returnValue = msgBox.exec()
            if returnValue == QMessageBox.Ok:
                print('OK clicked')
                return
            return



    def menu_load_db(self):
        self.load_db(self.load_new_db("Загрузите базу данных..."))

    def db_get_data(self):
        '''Метод переехал.'''
        if self.add_array:
            self.add_array[-1] = np.array2string(self.add_array[-1])
            #emb = np.array2string(embedding)
            sql = '''INSERT INTO "main"."vehicle"(model","vehicle_length","vehicle_width",
            "vehicle_height","wheel_distance","clearance","front_track_width","back_track_width","embedding")
            VALUES ({0},{1},{2},{3},{4},{5},{6},{7},{8})'''.format(self.add_array[0], self.add_array[1], self.add_array[2], self.add_array[3], self.add_array[4], self.add_array[5], self.add_array[6], self.add_array[7], self.add_array[8])
            print(sql)

    def db_add_vehicle(self):#, model, height, length, width, wheel_distance, clearance, front_track_width, back_track_width, embedding):
        '''Добавляет строку в таблицу vehicle в БД.'''
        self.add_window = QtWidgets.QMainWindow()
        self.ui = Ui_db_add_window(self.classifier, self.sqlite_connection, self.cursor) # parameters
        self.ui.setupUi(self.add_window, self)
        self.add_window.show()

    def db_search_vehicle(self):
        '''Выполняет поиск автомобиля по названию модели.'''
        self.search_window = QtWidgets.QMainWindow()
        self.ui = Ui_search_window(self.sqlite_connection, self.cursor) # parameters
        self.ui.setupUi(self.search_window, self)
        self.search_window.show()
