# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'search_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QCoreApplication
from PyQt5.QtWidgets import QFileDialog, QWidget, QMessageBox
from PyQt5.QtGui import QIcon, QPixmap, QIntValidator
from os.path import expanduser
from main_Window import *
import sqlite3
import numpy as np


class Ui_search_window(object):
    def __init__(self, sql_connection, cursor):
        self.sqlite_connection = sql_connection
        self.cursor = cursor

    def setupUi(self, search_window, window):
        search_window.setObjectName("search_window")
        search_window.resize(715, 429)
        search_window.setGeometry(QtCore.QRect(550, 350, 715, 429))
        self.centralwidget = QtWidgets.QWidget(search_window)
        self.centralwidget.setObjectName("centralwidget")
        self.OnlyInt = QIntValidator(0, 100000)
        self.search_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.search_edit.setGeometry(QtCore.QRect(30, 40, 531, 27))
        self.search_edit.setObjectName("search_edit")
        self.search_button = QtWidgets.QPushButton(self.centralwidget)
        self.search_button.setGeometry(QtCore.QRect(590, 40, 94, 27))
        self.search_button.setObjectName("search_button")
        self.search_button.clicked.connect(self.search)

        self.commit_button = QtWidgets.QPushButton(self.centralwidget)
        self.commit_button.setGeometry(QtCore.QRect(330, 350, 111, 27))
        self.commit_button.setObjectName("commit_button")
        self.commit_button.setEnabled(False)
        self.commit_button.clicked.connect(self.db_commit)

        self.change_button = QtWidgets.QPushButton(self.centralwidget)
        self.change_button.setGeometry(QtCore.QRect(570, 350, 111, 27))
        self.change_button.setObjectName("change_button")
        self.change_button.clicked.connect(self.db_change)

        self.delete_button = QtWidgets.QPushButton(self.centralwidget)
        self.delete_button.setGeometry(QtCore.QRect(450, 350, 111, 27))
        self.delete_button.setObjectName("delete_button")
        self.delete_button.clicked.connect(self.db_delete)

        self.length_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.length_edit.setGeometry(QtCore.QRect(120, 170, 151, 27))
        self.length_edit.setObjectName("length_edit")
        self.length_edit.setValidator(self.OnlyInt)

        self.height_param_label = QtWidgets.QLabel(self.centralwidget)
        self.height_param_label.setGeometry(QtCore.QRect(20, 270, 91, 21))
        self.height_param_label.setObjectName("height_param_label")

        self.wheel_distance_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.wheel_distance_edit.setGeometry(QtCore.QRect(530, 120, 151, 27))
        self.wheel_distance_edit.setObjectName("wheel_distance_edit")
        self.wheel_distance_edit.setValidator(self.OnlyInt)

        self.clearance_param_label = QtWidgets.QLabel(self.centralwidget)
        self.clearance_param_label.setGeometry(QtCore.QRect(300, 170, 161, 21))
        self.clearance_param_label.setObjectName("clearance_param_label")

        self.back_track_width_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.back_track_width_edit.setGeometry(QtCore.QRect(530, 270, 151, 27))
        self.back_track_width_edit.setObjectName("back_track_width_edit")
        self.back_track_width_edit.setValidator(self.OnlyInt)

        self.height_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.height_edit.setGeometry(QtCore.QRect(120, 270, 151, 27))
        self.height_edit.setObjectName("height_edit")
        self.height_edit.setValidator(self.OnlyInt)

        self.clearance_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.clearance_edit.setGeometry(QtCore.QRect(530, 170, 151, 27))
        self.clearance_edit.setObjectName("clearance_edit")
        self.clearance_edit.setValidator(self.OnlyInt)

        self.length_param_label = QtWidgets.QLabel(self.centralwidget)
        self.length_param_label.setGeometry(QtCore.QRect(20, 170, 81, 21))
        self.length_param_label.setObjectName("length_param_label")

        self.width_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.width_edit.setGeometry(QtCore.QRect(120, 220, 151, 27))
        self.width_edit.setObjectName("width_edit")
        self.width_edit.setValidator(self.OnlyInt)

        self.front_track_width_param_label = QtWidgets.QLabel(self.centralwidget)
        self.front_track_width_param_label.setGeometry(QtCore.QRect(300, 220, 231, 21))
        self.front_track_width_param_label.setObjectName("front_track_width_param_label")

        self.model_param_label = QtWidgets.QLabel(self.centralwidget)
        self.model_param_label.setGeometry(QtCore.QRect(20, 120, 71, 21))
        self.model_param_label.setObjectName("model_param_label")

        self.width_param_label = QtWidgets.QLabel(self.centralwidget)
        self.width_param_label.setGeometry(QtCore.QRect(20, 220, 101, 21))
        self.width_param_label.setObjectName("width_param_label")

        self.back_track_width_param_label = QtWidgets.QLabel(self.centralwidget)
        self.back_track_width_param_label.setGeometry(QtCore.QRect(300, 270, 241, 21))
        self.back_track_width_param_label.setObjectName("back_track_width_param_label")

        self.front_track_width_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.front_track_width_edit.setGeometry(QtCore.QRect(530, 220, 151, 27))
        self.front_track_width_edit.setObjectName("front_track_width_edit")
        self.front_track_width_edit.setValidator(self.OnlyInt)

        self.model_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.model_edit.setGeometry(QtCore.QRect(120, 120, 151, 27))
        self.model_edit.setObjectName("model_edit")

        self.wheel_distance_param_label = QtWidgets.QLabel(self.centralwidget)
        self.wheel_distance_param_label.setGeometry(QtCore.QRect(300, 120, 161, 21))
        self.wheel_distance_param_label.setObjectName("wheel_distance_param_label")
        search_window.setCentralWidget(self.centralwidget)

        self.mainWindow = window
        self.change_edits_condition()

        self.retranslateUi(search_window)
        QtCore.QMetaObject.connectSlotsByName(search_window)

    def retranslateUi(self, search_window):
        _translate = QtCore.QCoreApplication.translate
        search_window.setWindowTitle(_translate("search_window", "Изменить информацию о транспортном средстве"))
        self.search_button.setText(_translate("search_window", "Поиск"))
        self.commit_button.setText(_translate("search_window", "Подтвердить"))
        self.change_button.setText(_translate("search_window", "Изменить"))
        self.delete_button.setText(_translate("search_window", "Удалить"))
        self.height_param_label.setText(_translate("search_window", "Высота, мм:"))
        self.clearance_param_label.setText(_translate("search_window", "Клиренс, мм:"))
        self.length_param_label.setText(_translate("search_window", "Длина, мм:"))
        self.front_track_width_param_label.setText(_translate("search_window", "Ширина передней колеи, мм:"))
        self.model_param_label.setText(_translate("search_window", "Модель:"))
        self.width_param_label.setText(_translate("search_window", "Ширина, мм:"))
        self.back_track_width_param_label.setText(_translate("search_window", "Ширина задней колеи, мм:"))
        self.wheel_distance_param_label.setText(_translate("search_window", "Колесная база, мм:"))

    def change_edits_condition(self, condition=False):
        self.model_edit.setEnabled(condition)
        self.length_edit.setEnabled(condition)
        self.width_edit.setEnabled(condition)
        self.height_edit.setEnabled(condition)
        self.wheel_distance_edit.setEnabled(condition)
        self.clearance_edit.setEnabled(condition)
        self.front_track_width_edit.setEnabled(condition)
        self.back_track_width_edit.setEnabled(condition)

    def search(self):
        text = self.search_edit.text()
        if text == '':
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("Введите модель транспортного средства.")
            msgBox.setWindowTitle("ОШИБКА!")
            msgBox.setStandardButtons(QMessageBox.Ok)
            returnValue = msgBox.exec()
            if returnValue == QMessageBox.Ok:
                print('OK clicked')
            return
        else:
            sql = '''SELECT * FROM main.vehicle WHERE model LIKE "%{0}%" '''.format(text)
        self.cursor.execute(sql)
        info = self.cursor.fetchall()
        if len(info) == 0:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("Ничего не найдено.")
            msgBox.setWindowTitle("Предупреждение!")
            msgBox.setStandardButtons(QMessageBox.Ok)
            returnValue = msgBox.exec()
            if returnValue == QMessageBox.Ok:
                print('OK clicked')
            return
        else:
            self.search_edit.setText(str(info[0][1]))
            self.model_edit.setText(str(info[0][1]))
            self.length_edit.setText(str(info[0][2])) if str(info[0][2]) != 'None' else self.length_edit.setText('')
            self.width_edit.setText(str(info[0][3])) if str(info[0][2]) != 'None' else self.width_edit.setText('')
            self.height_edit.setText(str(info[0][4])) if str(info[0][2]) != 'None' else self.height_edit.setText('')
            self.wheel_distance_edit.setText(str(info[0][5])) if str(info[0][2]) != 'None' else self.wheel_distance_edit.setText('')
            self.clearance_edit.setText(str(info[0][6])) if str(info[0][2]) != 'None' else self.clearance_edit.setText('')
            self.front_track_width_edit.setText(str(info[0][7])) if str(info[0][2]) != 'None' else self.front_track_width_edit.setText('')
            self.back_track_width_edit.setText(str(info[0][8])) if str(info[0][2]) != 'None' else self.back_track_width_edit.setText('')

    def clear(self):
        self.search_edit.setText('')
        self.model_edit.setText('')
        self.length_edit.setText('')
        self.width_edit.setText('')
        self.height_edit.setText('')
        self.wheel_distance_edit.setText('')
        self.clearance_edit.setText('')
        self.front_track_width_edit.setText('')
        self.back_track_width_edit.setText('')


    def db_change(self):
        if self.model_edit.text() != '':
            self.change_edits_condition(True)
            self.change_button.setEnabled(False)
            self.search_edit.setEnabled(False)
            self.delete_button.setEnabled(False)
            self.commit_button.setEnabled(True)
        else:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("Выберите модель для изменения.")
            msgBox.setWindowTitle("Предупреждение!")
            msgBox.setStandardButtons(QMessageBox.Ok)
            returnValue = msgBox.exec()
            if returnValue == QMessageBox.Ok:
                print('OK clicked')
            return

    def db_commit(self):
        btwt = int(self.back_track_width_edit.text()) if self.back_track_width_edit.text() != '' else "NULL"
        ftwt = int(self.front_track_width_edit.text()) if self.front_track_width_edit.text() != '' else "NULL"
        clr = int(self.clearance_edit.text()) if self.clearance_edit.text() != '' else "NULL"
        mdl = self.model_edit.text()
        #print(mdl)
        w = int(self.width_edit.text()) if self.width_edit.text() != '' else "NULL"
        l = int(self.length_edit.text()) if self.length_edit.text() != '' else "NULL"
        h = int(self.height_edit.text()) if self.height_edit.text() != '' else "NULL"
        wd = int(self.wheel_distance_edit.text()) if self.wheel_distance_edit.text() != '' else "NULL"
        self.add_array = [mdl, l, w, h, wd, clr, ftwt, btwt]
        sql = '''UPDATE main.vehicle SET model = "{0}", vehicle_length = {1},
                vehicle_width = {2}, vehicle_height = {3}, wheel_distance = {4},
                clearance = {5}, front_track_width = {6}, back_track_width = {7}
                WHERE model = "{8}"'''.format(self.add_array[0], self.add_array[1], self.add_array[2], self.add_array[3], self.add_array[4], self.add_array[5], self.add_array[6], self.add_array[7], self.search_edit.text())
        #print(sql)
        self.cursor.execute(sql)
        self.sqlite_connection.commit()
        print("commited")
        self.change_edits_condition()
        self.change_button.setEnabled(True)
        self.search_edit.setEnabled(True)
        self.commit_button.setEnabled(False)
        self.delete_button.setEnabled(True)

    def db_delete(self):
        if self.model_edit.text() == '': #  if self.search_edit.text() == '':
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("Введите название удаляемой модели.")
            msgBox.setWindowTitle("ОШИБКА!")
            msgBox.setStandardButtons(QMessageBox.Ok)
            returnValue = msgBox.exec()
            if returnValue == QMessageBox.Ok:
                print('OK clicked')
                return
        #try:
        sql_check = '''SELECT model FROM vehicle WHERE model = "{}"'''.format(self.model_edit.text())
        self.cursor.execute(sql_check)
        info = self.cursor.fetchall()
        #print(len(info))
        if len(info) != 0:
            sql = '''DELETE FROM vehicle WHERE model = "{}"'''.format(self.model_edit.text())
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("Вы действительно хотите удалить {}?".format(self.model_edit.text()))
            msgBox.setWindowTitle("Подтвержение.")
            #msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.'Нет')
            msgBox.addButton("Нет", QMessageBox.NoRole)
            msgBox.addButton("Да", QMessageBox.YesRole)
            returnValue = msgBox.exec()
            #print(returnValue)
            if returnValue == 1:
                print('OK clicked')
                self.cursor.execute(sql)
                self.sqlite_connection.commit()
                print("deleted")
                self.clear()
                return
            if returnValue == 0:
                print("NO")
                return
        else:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("Введенная модель не существует.")
            msgBox.setWindowTitle("ОШИБКА!")
            msgBox.setStandardButtons(QMessageBox.Ok)
            returnValue = msgBox.exec()
            if returnValue == QMessageBox.Ok:
                print('OK clicked')
                return
